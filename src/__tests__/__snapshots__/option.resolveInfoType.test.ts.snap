// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`resolveInfoType should default to GraphQLResolveInfo 1`] = `
"/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by @ruiaraujo/graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLRootQuery {
  test: string;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  RootQuery?: GQLRootQueryTypeResolver;
}
export interface GQLRootQueryTypeResolver<TParent = any> {
  test?: RootQueryToTestResolver<TParent>;
}

export interface RootQueryToTestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
"
`;

exports[`resolveInfoType should use custom resolve info 1`] = `
"/* tslint:disable */
/* eslint-disable */
interface CustomResolveInfo {}
/**
 * This file is auto-generated by @ruiaraujo/graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLRootQuery {
  test: string;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  RootQuery?: GQLRootQueryTypeResolver;
}
export interface GQLRootQueryTypeResolver<TParent = any> {
  test?: RootQueryToTestResolver<TParent>;
}

export interface RootQueryToTestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: CustomResolveInfo): TResult;
}
"
`;
